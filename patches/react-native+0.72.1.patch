diff --git a/node_modules/react-native/React/Fabric/Mounting/ComponentViews/TextInput/RCTTextInputComponentView.mm b/node_modules/react-native/React/Fabric/Mounting/ComponentViews/TextInput/RCTTextInputComponentView.mm
index dd96b5d..59859ee 100644
--- a/node_modules/react-native/React/Fabric/Mounting/ComponentViews/TextInput/RCTTextInputComponentView.mm
+++ b/node_modules/react-native/React/Fabric/Mounting/ComponentViews/TextInput/RCTTextInputComponentView.mm
@@ -115,6 +115,10 @@ - (void)updateProps:(Props::Shared const &)props oldProps:(Props::Shared const &
     [self _setMultiline:newTextInputProps.traits.multiline];
   }
 
+  if (newTextInputProps.traits.showSoftInputOnFocus != oldTextInputProps.traits.showSoftInputOnFocus) {
+    [self _setShowSoftInputOnFocus:newTextInputProps.traits.showSoftInputOnFocus];
+  }
+
   if (newTextInputProps.traits.autocapitalizationType != oldTextInputProps.traits.autocapitalizationType) {
     _backedTextInputView.autocapitalizationType =
         RCTUITextAutocapitalizationTypeFromAutocapitalizationType(newTextInputProps.traits.autocapitalizationType);
@@ -617,6 +621,26 @@ - (void)_setMultiline:(BOOL)multiline
   RCTCopyBackedTextInput(_backedTextInputView, backedTextInputView);
   _backedTextInputView = backedTextInputView;
   [self addSubview:_backedTextInputView];
+    
+  auto const &currentTextInputProps = *std::static_pointer_cast<TextInputProps const>(_props);
+  [self _setShowSoftInputOnFocus:currentTextInputProps.traits.showSoftInputOnFocus];
+}
+
+- (void)_setShowSoftInputOnFocus:(BOOL)showSoftInputOnFocus
+{
+    if (showSoftInputOnFocus) {
+      // Resets to default keyboard.
+      _backedTextInputView.inputView = nil;
+
+      // Without the call to reloadInputViews, the keyboard will not change until the textInput field (the first
+      // responder) loses and regains focus.
+      if (_backedTextInputView.isFirstResponder) {
+        [_backedTextInputView reloadInputViews];
+      }
+    } else {
+      // Hides keyboard, but keeps blinking cursor.
+      _backedTextInputView.inputView = [UIView new];
+  }
 }
 
 - (BOOL)_textOf:(NSAttributedString *)newText equals:(NSAttributedString *)oldText
diff --git a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/modal/ModalHostHelper.java b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/modal/ModalHostHelper.java
deleted file mode 100644
index 3a226c0..0000000
--- a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/modal/ModalHostHelper.java
+++ /dev/null
@@ -1,63 +0,0 @@
-/*
- * Copyright (c) Meta Platforms, Inc. and affiliates.
- *
- * This source code is licensed under the MIT license found in the
- * LICENSE file in the root directory of this source tree.
- */
-
-package com.facebook.react.views.modal;
-
-import android.content.Context;
-import android.content.res.Resources;
-import android.content.res.TypedArray;
-import android.graphics.Point;
-import android.view.Display;
-import android.view.WindowManager;
-import com.facebook.infer.annotation.Assertions;
-
-/** Helper class for Modals. */
-/*package*/ class ModalHostHelper {
-
-  private static final Point MIN_POINT = new Point();
-  private static final Point MAX_POINT = new Point();
-  private static final Point SIZE_POINT = new Point();
-
-  /**
-   * To get the size of the screen, we use information from the WindowManager and default Display.
-   * We don't use DisplayMetricsHolder, or Display#getSize() because they return values that include
-   * the status bar. We only want the values of what will actually be shown on screen. We use
-   * Display#getSize() to determine if the screen is in portrait or landscape. We don't use
-   * getRotation because the 'natural' rotation will be portrait on phones and landscape on tablets.
-   * This should only be called on the native modules/shadow nodes thread.
-   */
-  public static Point getModalHostSize(Context context) {
-    WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
-    Display display = Assertions.assertNotNull(wm).getDefaultDisplay();
-    // getCurrentSizeRange will return the min and max width and height that the window can be
-    display.getCurrentSizeRange(MIN_POINT, MAX_POINT);
-    // getSize will return the dimensions of the screen in its current orientation
-    display.getSize(SIZE_POINT);
-
-    int[] attrs = {android.R.attr.windowFullscreen};
-    Resources.Theme theme = context.getTheme();
-    TypedArray ta = theme.obtainStyledAttributes(attrs);
-    boolean windowFullscreen = ta.getBoolean(0, false);
-
-    // We need to add the status bar height to the height if we have a fullscreen window,
-    // because Display.getCurrentSizeRange doesn't include it.
-    Resources resources = context.getResources();
-    int statusBarId = resources.getIdentifier("status_bar_height", "dimen", "android");
-    int statusBarHeight = 0;
-    if (windowFullscreen && statusBarId > 0) {
-      statusBarHeight = (int) resources.getDimension(statusBarId);
-    }
-
-    if (SIZE_POINT.x < SIZE_POINT.y) {
-      // If we are vertical the width value comes from min width and height comes from max height
-      return new Point(MIN_POINT.x, MAX_POINT.y + statusBarHeight);
-    } else {
-      // If we are horizontal the width value comes from max width and height comes from min height
-      return new Point(MAX_POINT.x, MIN_POINT.y + statusBarHeight);
-    }
-  }
-}
diff --git a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/modal/ModalHostShadowNode.java b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/modal/ModalHostShadowNode.java
deleted file mode 100644
index 7288fe0..0000000
--- a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/modal/ModalHostShadowNode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-/*
- * Copyright (c) Meta Platforms, Inc. and affiliates.
- *
- * This source code is licensed under the MIT license found in the
- * LICENSE file in the root directory of this source tree.
- */
-
-package com.facebook.react.views.modal;
-
-import android.graphics.Point;
-import com.facebook.react.uimanager.LayoutShadowNode;
-import com.facebook.react.uimanager.ReactShadowNodeImpl;
-
-/**
- * We implement the Modal by using an Android Dialog. That will fill the entire window of the
- * application. To get layout to work properly, we need to layout all the elements within the
- * Modal's inner content view as if they can fill the entire window. To do that, we need to
- * explicitly set the styleWidth and styleHeight on the LayoutShadowNode of the child of this node
- * to be the window size. This will then cause the children of the Modal to layout as if they can
- * fill the window.
- */
-class ModalHostShadowNode extends LayoutShadowNode {
-
-  public ModalHostShadowNode() {}
-
-  /**
-   * We need to set the styleWidth and styleHeight of the one child (represented by the <View/>
-   * within the <RCTModalHostView/> in Modal.js. This needs to fill the entire window.
-   */
-  @Override
-  public void addChildAt(ReactShadowNodeImpl child, int i) {
-    super.addChildAt(child, i);
-    Point modalSize = ModalHostHelper.getModalHostSize(getThemedContext());
-    child.setStyleWidth(modalSize.x);
-    child.setStyleHeight(modalSize.y);
-  }
-}
diff --git a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/modal/ReactModalHostManager.java b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/modal/ReactModalHostManager.java
index 15ce94c..17c6782 100644
--- a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/modal/ReactModalHostManager.java
+++ b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/modal/ReactModalHostManager.java
@@ -50,16 +50,6 @@ public class ReactModalHostManager extends ViewGroupManager<ReactModalHostView>
     return new ReactModalHostView(reactContext);
   }
 
-  @Override
-  public LayoutShadowNode createShadowNodeInstance() {
-    return new ModalHostShadowNode();
-  }
-
-  @Override
-  public Class<? extends LayoutShadowNode> getShadowNodeClass() {
-    return ModalHostShadowNode.class;
-  }
-
   @Override
   public void onDropViewInstance(ReactModalHostView view) {
     super.onDropViewInstance(view);
@@ -168,8 +158,6 @@ public class ReactModalHostManager extends ViewGroupManager<ReactModalHostView>
   public Object updateState(
       ReactModalHostView view, ReactStylesDiffMap props, StateWrapper stateWrapper) {
     view.getFabricViewStateManager().setStateWrapper(stateWrapper);
-    Point modalSize = ModalHostHelper.getModalHostSize(view.getContext());
-    view.updateState(modalSize.x, modalSize.y);
     return null;
   }
 
diff --git a/node_modules/react-native/ReactCommon/react/renderer/components/textinput/androidtextinput/react/renderer/components/androidtextinput/AndroidTextInputShadowNode.cpp b/node_modules/react-native/ReactCommon/react/renderer/components/textinput/androidtextinput/react/renderer/components/androidtextinput/AndroidTextInputShadowNode.cpp
index 7bd83c7..152b6af 100644
--- a/node_modules/react-native/ReactCommon/react/renderer/components/textinput/androidtextinput/react/renderer/components/androidtextinput/AndroidTextInputShadowNode.cpp
+++ b/node_modules/react-native/ReactCommon/react/renderer/components/textinput/androidtextinput/react/renderer/components/androidtextinput/AndroidTextInputShadowNode.cpp
@@ -169,14 +169,6 @@ void AndroidTextInputShadowNode::updateStateIfNeeded() {
 Size AndroidTextInputShadowNode::measureContent(
     LayoutContext const & /*layoutContext*/,
     LayoutConstraints const &layoutConstraints) const {
-  if (getStateData().cachedAttributedStringId != 0) {
-    return textLayoutManager_
-        ->measureCachedSpannableById(
-            getStateData().cachedAttributedStringId,
-            getConcreteProps().paragraphAttributes,
-            layoutConstraints)
-        .size;
-  }
 
   // Layout is called right after measure.
   // Measure is marked as `const`, and `layout` is not; so State can be updated
diff --git a/node_modules/react-native/ReactCommon/react/renderer/textlayoutmanager/platform/ios/react/renderer/textlayoutmanager/RCTFontUtils.mm b/node_modules/react-native/ReactCommon/react/renderer/textlayoutmanager/platform/ios/react/renderer/textlayoutmanager/RCTFontUtils.mm
index 4f8d5aa..18171a6 100644
--- a/node_modules/react-native/ReactCommon/react/renderer/textlayoutmanager/platform/ios/react/renderer/textlayoutmanager/RCTFontUtils.mm
+++ b/node_modules/react-native/ReactCommon/react/renderer/textlayoutmanager/platform/ios/react/renderer/textlayoutmanager/RCTFontUtils.mm
@@ -35,9 +35,6 @@ static RCTFontProperties RCTResolveFontProperties(
 {
   fontProperties.family = fontProperties.family.length ? fontProperties.family : baseFontProperties.family;
   fontProperties.size = !isnan(fontProperties.size) ? fontProperties.size : baseFontProperties.size;
-  fontProperties.weight = !isnan(fontProperties.weight) ? fontProperties.weight : baseFontProperties.weight;
-  fontProperties.style =
-      fontProperties.style != RCTFontStyleUndefined ? fontProperties.style : baseFontProperties.style;
   fontProperties.variant =
       fontProperties.variant != RCTFontVariantUndefined ? fontProperties.variant : baseFontProperties.variant;
   return fontProperties;
@@ -116,9 +113,14 @@ static RCTFontStyle RCTGetFontStyle(UIFont *font)
   if ([fontProperties.family isEqualToString:defaultFontProperties.family]) {
     // Handle system font as special case. This ensures that we preserve
     // the specific metrics of the standard system font as closely as possible.
+    fontProperties.weight = !isnan(fontProperties.weight) ? fontProperties.weight : defaultFontProperties.weight;
+    fontProperties.style =
+        fontProperties.style != RCTFontStyleUndefined ? fontProperties.style : defaultFontProperties.style;
     font = RCTDefaultFontWithFontProperties(fontProperties);
   } else {
     NSArray<NSString *> *fontNames = [UIFont fontNamesForFamilyName:fontProperties.family];
+    UIFontWeight fontWeight = fontProperties.weight;
+    RCTFontStyle fontStyle = fontProperties.style;
 
     if (fontNames.count == 0) {
       // Gracefully handle being given a font name rather than font family, for
@@ -129,18 +131,24 @@ static RCTFontStyle RCTGetFontStyle(UIFont *font)
         // Failback to system font.
         font = [UIFont systemFontOfSize:effectiveFontSize weight:fontProperties.weight];
       }
-    } else {
+      
+      fontNames = [UIFont fontNamesForFamilyName:font.familyName];
+      fontWeight = isnan(fontWeight) ? RCTGetFontWeight(font) : fontWeight;
+      fontStyle = fontStyle == RCTFontStyleUndefined ? RCTGetFontStyle(font) : fontStyle;
+    }
+        
+    if (fontNames.count != 0) {
       // Get the closest font that matches the given weight for the fontFamily
       CGFloat closestWeight = INFINITY;
       for (NSString *name in fontNames) {
         UIFont *fontMatch = [UIFont fontWithName:name size:effectiveFontSize];
 
-        if (RCTGetFontStyle(fontMatch) != fontProperties.style) {
+        if (RCTGetFontStyle(fontMatch) != fontStyle) {
           continue;
         }
 
         CGFloat testWeight = RCTGetFontWeight(fontMatch);
-        if (ABS(testWeight - fontProperties.weight) < ABS(closestWeight - fontProperties.weight)) {
+        if (ABS(testWeight - fontWeight) < ABS(closestWeight - fontWeight)) {
           font = fontMatch;
           closestWeight = testWeight;
         }
