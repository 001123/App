diff --git a/node_modules/react-native-reanimated/src/ConfigHelper.ts b/node_modules/react-native-reanimated/src/ConfigHelper.ts
index fac2429..c2ae2c9 100644
--- a/node_modules/react-native-reanimated/src/ConfigHelper.ts
+++ b/node_modules/react-native-reanimated/src/ConfigHelper.ts
@@ -1,148 +1,41 @@
+'use strict';
+import { PropsAllowlists } from './propsAllowlists';
 import { configureProps as jsiConfigureProps } from './reanimated2/core';
 
-/**
- * Styles allowed to be direcly updated in UI thread
- */
-let UI_THREAD_PROPS_WHITELIST: Record<string, boolean> = {
-  opacity: true,
-  transform: true,
-  /* colors */
-  backgroundColor: true,
-  borderRightColor: true,
-  borderBottomColor: true,
-  borderColor: true,
-  borderEndColor: true,
-  borderLeftColor: true,
-  borderStartColor: true,
-  borderTopColor: true,
-  /* ios styles */
-  shadowOpacity: true,
-  shadowRadius: true,
-  /* legacy android transform properties */
-  scaleX: true,
-  scaleY: true,
-  translateX: true,
-  translateY: true,
-};
-
-/**
- * Whitelist of view props that can be updated in native thread via UIManagerModule
- */
-let NATIVE_THREAD_PROPS_WHITELIST: Record<string, boolean> = {
-  borderBottomWidth: true,
-  borderEndWidth: true,
-  borderLeftWidth: true,
-  borderRightWidth: true,
-  borderStartWidth: true,
-  borderTopWidth: true,
-  borderWidth: true,
-  bottom: true,
-  flex: true,
-  flexGrow: true,
-  flexShrink: true,
-  height: true,
-  left: true,
-  margin: true,
-  marginBottom: true,
-  marginEnd: true,
-  marginHorizontal: true,
-  marginLeft: true,
-  marginRight: true,
-  marginStart: true,
-  marginTop: true,
-  marginVertical: true,
-  maxHeight: true,
-  maxWidth: true,
-  minHeight: true,
-  minWidth: true,
-  padding: true,
-  paddingBottom: true,
-  paddingEnd: true,
-  paddingHorizontal: true,
-  paddingLeft: true,
-  paddingRight: true,
-  paddingStart: true,
-  paddingTop: true,
-  paddingVertical: true,
-  right: true,
-  start: true,
-  top: true,
-  width: true,
-  zIndex: true,
-  borderBottomEndRadius: true,
-  borderBottomLeftRadius: true,
-  borderBottomRightRadius: true,
-  borderBottomStartRadius: true,
-  borderRadius: true,
-  borderTopEndRadius: true,
-  borderTopLeftRadius: true,
-  borderTopRightRadius: true,
-  borderTopStartRadius: true,
-  elevation: true,
-  fontSize: true,
-  lineHeight: true,
-  textShadowRadius: true,
-  letterSpacing: true,
-  aspectRatio: true,
-  columnGap: true, // iOS only
-  end: true, // number or string
-  flexBasis: true, // number or string
-  gap: true,
-  rowGap: true,
-  /* strings */
-  display: true,
-  backfaceVisibility: true,
-  overflow: true,
-  resizeMode: true,
-  fontStyle: true,
-  fontWeight: true,
-  textAlign: true,
-  textDecorationLine: true,
-  fontFamily: true,
-  textAlignVertical: true,
-  fontVariant: true,
-  textDecorationStyle: true,
-  textTransform: true,
-  writingDirection: true,
-  alignContent: true,
-  alignItems: true,
-  alignSelf: true,
-  direction: true, // iOS only
-  flexDirection: true,
-  flexWrap: true,
-  justifyContent: true,
-  position: true,
-  /* text color */
-  color: true,
-  tintColor: true,
-  shadowColor: true,
-  placeholderTextColor: true,
-};
-
 function configureProps(): void {
   jsiConfigureProps(
-    Object.keys(UI_THREAD_PROPS_WHITELIST),
-    Object.keys(NATIVE_THREAD_PROPS_WHITELIST)
+    Object.keys(PropsAllowlists.UI_THREAD_PROPS_WHITELIST),
+    Object.keys(PropsAllowlists.NATIVE_THREAD_PROPS_WHITELIST)
   );
 }
 
 export function addWhitelistedNativeProps(
   props: Record<string, boolean>
 ): void {
-  const oldSize = Object.keys(NATIVE_THREAD_PROPS_WHITELIST).length;
-  NATIVE_THREAD_PROPS_WHITELIST = {
-    ...NATIVE_THREAD_PROPS_WHITELIST,
+  const oldSize = Object.keys(
+    PropsAllowlists.NATIVE_THREAD_PROPS_WHITELIST
+  ).length;
+  PropsAllowlists.NATIVE_THREAD_PROPS_WHITELIST = {
+    ...PropsAllowlists.NATIVE_THREAD_PROPS_WHITELIST,
     ...props,
   };
-  if (oldSize !== Object.keys(NATIVE_THREAD_PROPS_WHITELIST).length) {
+  if (
+    oldSize !==
+    Object.keys(PropsAllowlists.NATIVE_THREAD_PROPS_WHITELIST).length
+  ) {
     configureProps();
   }
 }
 
 export function addWhitelistedUIProps(props: Record<string, boolean>): void {
-  const oldSize = Object.keys(UI_THREAD_PROPS_WHITELIST).length;
-  UI_THREAD_PROPS_WHITELIST = { ...UI_THREAD_PROPS_WHITELIST, ...props };
-  if (oldSize !== Object.keys(UI_THREAD_PROPS_WHITELIST).length) {
+  const oldSize = Object.keys(PropsAllowlists.UI_THREAD_PROPS_WHITELIST).length;
+  PropsAllowlists.UI_THREAD_PROPS_WHITELIST = {
+    ...PropsAllowlists.UI_THREAD_PROPS_WHITELIST,
+    ...props,
+  };
+  if (
+    oldSize !== Object.keys(PropsAllowlists.UI_THREAD_PROPS_WHITELIST).length
+  ) {
     configureProps();
   }
 }
@@ -169,8 +62,8 @@ export function adaptViewConfig(viewConfig: ViewConfig): void {
       // we don't want to add native props as they affect layout
       // we also skip props which repeat here
       if (
-        !(key in NATIVE_THREAD_PROPS_WHITELIST) &&
-        !(key in UI_THREAD_PROPS_WHITELIST)
+        !(key in PropsAllowlists.NATIVE_THREAD_PROPS_WHITELIST) &&
+        !(key in PropsAllowlists.UI_THREAD_PROPS_WHITELIST)
       ) {
         propsToAdd[key] = true;
       }
diff --git a/node_modules/react-native-reanimated/src/propsAllowlists.ts b/node_modules/react-native-reanimated/src/propsAllowlists.ts
new file mode 100644
index 0000000..893cdfa
--- /dev/null
+++ b/node_modules/react-native-reanimated/src/propsAllowlists.ts
@@ -0,0 +1,125 @@
+type AllowlistsHolder = {
+  UI_THREAD_PROPS_WHITELIST: Record<string, boolean>;
+  NATIVE_THREAD_PROPS_WHITELIST: Record<string, boolean>;
+};
+
+export const PropsAllowlists: AllowlistsHolder = {
+  /**
+   * Styles allowed to be direcly updated in UI thread
+   */
+  UI_THREAD_PROPS_WHITELIST: {
+    opacity: true,
+    transform: true,
+    /* colors */
+    backgroundColor: true,
+    borderRightColor: true,
+    borderBottomColor: true,
+    borderColor: true,
+    borderEndColor: true,
+    borderLeftColor: true,
+    borderStartColor: true,
+    borderTopColor: true,
+    /* ios styles */
+    shadowOpacity: true,
+    shadowRadius: true,
+    /* legacy android transform properties */
+    scaleX: true,
+    scaleY: true,
+    translateX: true,
+    translateY: true,
+  },
+  /**
+   * Whitelist of view props that can be updated in native thread via UIManagerModule
+   */
+  NATIVE_THREAD_PROPS_WHITELIST: {
+    borderBottomWidth: true,
+    borderEndWidth: true,
+    borderLeftWidth: true,
+    borderRightWidth: true,
+    borderStartWidth: true,
+    borderTopWidth: true,
+    borderWidth: true,
+    bottom: true,
+    flex: true,
+    flexGrow: true,
+    flexShrink: true,
+    height: true,
+    left: true,
+    margin: true,
+    marginBottom: true,
+    marginEnd: true,
+    marginHorizontal: true,
+    marginLeft: true,
+    marginRight: true,
+    marginStart: true,
+    marginTop: true,
+    marginVertical: true,
+    maxHeight: true,
+    maxWidth: true,
+    minHeight: true,
+    minWidth: true,
+    padding: true,
+    paddingBottom: true,
+    paddingEnd: true,
+    paddingHorizontal: true,
+    paddingLeft: true,
+    paddingRight: true,
+    paddingStart: true,
+    paddingTop: true,
+    paddingVertical: true,
+    right: true,
+    start: true,
+    top: true,
+    width: true,
+    zIndex: true,
+    borderBottomEndRadius: true,
+    borderBottomLeftRadius: true,
+    borderBottomRightRadius: true,
+    borderBottomStartRadius: true,
+    borderRadius: true,
+    borderTopEndRadius: true,
+    borderTopLeftRadius: true,
+    borderTopRightRadius: true,
+    borderTopStartRadius: true,
+    elevation: true,
+    fontSize: true,
+    lineHeight: true,
+    textShadowRadius: true,
+    textShadowOffset: true,
+    letterSpacing: true,
+    aspectRatio: true,
+    columnGap: true, // iOS only
+    end: true, // number or string
+    flexBasis: true, // number or string
+    gap: true,
+    rowGap: true,
+    /* strings */
+    display: true,
+    backfaceVisibility: true,
+    overflow: true,
+    resizeMode: true,
+    fontStyle: true,
+    fontWeight: true,
+    textAlign: true,
+    textDecorationLine: true,
+    fontFamily: true,
+    textAlignVertical: true,
+    fontVariant: true,
+    textDecorationStyle: true,
+    textTransform: true,
+    writingDirection: true,
+    alignContent: true,
+    alignItems: true,
+    alignSelf: true,
+    direction: true, // iOS only
+    flexDirection: true,
+    flexWrap: true,
+    justifyContent: true,
+    position: true,
+    /* text color */
+    color: true,
+    tintColor: true,
+    shadowColor: true,
+    placeholderTextColor: true,
+  },
+};
diff --git a/node_modules/react-native-reanimated/src/reanimated2/js-reanimated/index.ts b/node_modules/react-native-reanimated/src/reanimated2/js-reanimated/index.ts
index c218fa0..2ea9523 100644
--- a/node_modules/react-native-reanimated/src/reanimated2/js-reanimated/index.ts
+++ b/node_modules/react-native-reanimated/src/reanimated2/js-reanimated/index.ts
@@ -1,7 +1,9 @@
+'use strict';
 import JSReanimated from './JSReanimated';
 import type { StyleProps } from '../commonTypes';
 import type { AnimatedStyle } from '../helperTypes';
 import { isWeb } from '../PlatformChecker';
+import { PropsAllowlists } from '../../propsAllowlists';
 
 // eslint-disable-next-line @typescript-eslint/no-explicit-any
 let createReactDOMStyle: (style: any) => any;
@@ -54,9 +56,18 @@ interface JSReanimatedComponent {
   };
 }
 
+export interface ReanimatedHTMLElement extends HTMLElement {
+  previousStyle: StyleProps;
+  setNativeProps?: (style: StyleProps) => void;
+  props: Record<string, string | number>;
+  _touchableNode: {
+    setAttribute: (key: string, props: unknown) => void;
+  };
+}
+
 export const _updatePropsJS = (
   updates: StyleProps | AnimatedStyle<any>,
-  viewRef: { _component?: JSReanimatedComponent },
+  viewRef: { _component?: JSReanimatedComponent | ReanimatedHTMLElement },
   isAnimatedProps?: boolean
 ): void => {
   if (viewRef._component) {
@@ -98,13 +109,20 @@ export const _updatePropsJS = (
 };
 
 const setNativeProps = (
-  component: JSReanimatedComponent,
+  component: JSReanimatedComponent | ReanimatedHTMLElement,
   newProps: StyleProps,
   isAnimatedProps?: boolean
 ): void => {
   if (isAnimatedProps) {
-    component.setNativeProps?.(newProps);
-    return;
+    const uiProps: Record<string, unknown> = {};
+    for (const key in newProps) {
+      if (isNativeProp(key)) {
+        uiProps[key] = newProps[key];
+      }
+    }
+    // Only update UI props directly on the component,
+    // other props can be updated as standard style props.
+    component.setNativeProps?.(uiProps);
   }
 
   const previousStyle = component.previousStyle ? component.previousStyle : {};
@@ -152,4 +170,8 @@ const updatePropsDOM = (
   }
 };
 
+function isNativeProp(propName: string): boolean {
+  return !!PropsAllowlists.NATIVE_THREAD_PROPS_WHITELIST[propName];
+}
+
 export default reanimatedJS;
