diff --git a/node_modules/react-native/React/Fabric/Mounting/ComponentViews/TextInput/RCTTextInputComponentView.mm b/node_modules/react-native/React/Fabric/Mounting/ComponentViews/TextInput/RCTTextInputComponentView.mm
index 3d8b7f7..9309af1 100644
--- a/node_modules/react-native/React/Fabric/Mounting/ComponentViews/TextInput/RCTTextInputComponentView.mm
+++ b/node_modules/react-native/React/Fabric/Mounting/ComponentViews/TextInput/RCTTextInputComponentView.mm
@@ -116,6 +116,10 @@ - (void)updateProps:(Props::Shared const &)props oldProps:(Props::Shared const &
     [self _setMultiline:newTextInputProps.traits.multiline];
   }
 
+  if (newTextInputProps.traits.showSoftInputOnFocus != oldTextInputProps.traits.showSoftInputOnFocus) {
+    [self _setShowSoftInputOnFocus:newTextInputProps.traits.showSoftInputOnFocus];
+  }
+
   if (newTextInputProps.traits.autocapitalizationType != oldTextInputProps.traits.autocapitalizationType) {
     _backedTextInputView.autocapitalizationType =
         RCTUITextAutocapitalizationTypeFromAutocapitalizationType(newTextInputProps.traits.autocapitalizationType);
@@ -261,6 +265,11 @@ - (void)updateLayoutMetrics:(LayoutMetrics const &)layoutMetrics
       UIEdgeInsetsInsetRect(self.bounds, RCTUIEdgeInsetsFromEdgeInsets(layoutMetrics.borderWidth));
   _backedTextInputView.textContainerInset =
       RCTUIEdgeInsetsFromEdgeInsets(layoutMetrics.contentInsets - layoutMetrics.borderWidth);
+    
+  if (_eventEmitter) {
+    auto const &textInputEventEmitter = *std::static_pointer_cast<TextInputEventEmitter const>(_eventEmitter);
+    textInputEventEmitter.onContentSizeChange([self _textInputMetrics]);
+  }
 }
 
 - (void)prepareForRecycle
@@ -628,6 +637,26 @@ - (void)_setMultiline:(BOOL)multiline
   RCTCopyBackedTextInput(_backedTextInputView, backedTextInputView);
   _backedTextInputView = backedTextInputView;
   [self addSubview:_backedTextInputView];
+    
+  auto const &currentTextInputProps = *std::static_pointer_cast<TextInputProps const>(_props);
+  [self _setShowSoftInputOnFocus:currentTextInputProps.traits.showSoftInputOnFocus];
+}
+  
+- (void)_setShowSoftInputOnFocus:(BOOL)showSoftInputOnFocus
+{
+    if (showSoftInputOnFocus) {
+      // Resets to default keyboard.
+      _backedTextInputView.inputView = nil;
+  
+      // Without the call to reloadInputViews, the keyboard will not change until the textInput field (the first
+      // responder) loses and regains focus.
+      if (_backedTextInputView.isFirstResponder) {
+        [_backedTextInputView reloadInputViews];
+      }
+    } else {
+      // Hides keyboard, but keeps blinking cursor.
+      _backedTextInputView.inputView = [UIView new];
+  }
 }
 
 - (BOOL)_textOf:(NSAttributedString *)newText equals:(NSAttributedString *)oldText
diff --git a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/ReactInstanceManager.java b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/ReactInstanceManager.java
index 6e7a9af..60d664a 100644
--- a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/ReactInstanceManager.java
+++ b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/ReactInstanceManager.java
@@ -920,10 +920,11 @@ public class ReactInstanceManager {
       if (mViewManagers == null) {
         synchronized (mPackages) {
           if (mViewManagers == null) {
-            mViewManagers = new ArrayList<>();
+            ArrayList<ViewManager> viewManagers = new ArrayList<>();
             for (ReactPackage reactPackage : mPackages) {
-              mViewManagers.addAll(reactPackage.createViewManagers(catalystApplicationContext));
+              viewManagers.addAll(reactPackage.createViewManagers(catalystApplicationContext));
             }
+            mViewManagers = viewManagers;
             return mViewManagers;
           }
         }
diff --git a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/modal/ModalHostHelper.java b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/modal/ModalHostHelper.java
deleted file mode 100644
index 3a226c0..0000000
--- a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/modal/ModalHostHelper.java
+++ /dev/null
@@ -1,63 +0,0 @@
-/*
- * Copyright (c) Meta Platforms, Inc. and affiliates.
- *
- * This source code is licensed under the MIT license found in the
- * LICENSE file in the root directory of this source tree.
- */
-
-package com.facebook.react.views.modal;
-
-import android.content.Context;
-import android.content.res.Resources;
-import android.content.res.TypedArray;
-import android.graphics.Point;
-import android.view.Display;
-import android.view.WindowManager;
-import com.facebook.infer.annotation.Assertions;
-
-/** Helper class for Modals. */
-/*package*/ class ModalHostHelper {
-
-  private static final Point MIN_POINT = new Point();
-  private static final Point MAX_POINT = new Point();
-  private static final Point SIZE_POINT = new Point();
-
-  /**
-   * To get the size of the screen, we use information from the WindowManager and default Display.
-   * We don't use DisplayMetricsHolder, or Display#getSize() because they return values that include
-   * the status bar. We only want the values of what will actually be shown on screen. We use
-   * Display#getSize() to determine if the screen is in portrait or landscape. We don't use
-   * getRotation because the 'natural' rotation will be portrait on phones and landscape on tablets.
-   * This should only be called on the native modules/shadow nodes thread.
-   */
-  public static Point getModalHostSize(Context context) {
-    WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
-    Display display = Assertions.assertNotNull(wm).getDefaultDisplay();
-    // getCurrentSizeRange will return the min and max width and height that the window can be
-    display.getCurrentSizeRange(MIN_POINT, MAX_POINT);
-    // getSize will return the dimensions of the screen in its current orientation
-    display.getSize(SIZE_POINT);
-
-    int[] attrs = {android.R.attr.windowFullscreen};
-    Resources.Theme theme = context.getTheme();
-    TypedArray ta = theme.obtainStyledAttributes(attrs);
-    boolean windowFullscreen = ta.getBoolean(0, false);
-
-    // We need to add the status bar height to the height if we have a fullscreen window,
-    // because Display.getCurrentSizeRange doesn't include it.
-    Resources resources = context.getResources();
-    int statusBarId = resources.getIdentifier("status_bar_height", "dimen", "android");
-    int statusBarHeight = 0;
-    if (windowFullscreen && statusBarId > 0) {
-      statusBarHeight = (int) resources.getDimension(statusBarId);
-    }
-
-    if (SIZE_POINT.x < SIZE_POINT.y) {
-      // If we are vertical the width value comes from min width and height comes from max height
-      return new Point(MIN_POINT.x, MAX_POINT.y + statusBarHeight);
-    } else {
-      // If we are horizontal the width value comes from max width and height comes from min height
-      return new Point(MAX_POINT.x, MIN_POINT.y + statusBarHeight);
-    }
-  }
-}
diff --git a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/modal/ModalHostShadowNode.java b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/modal/ModalHostShadowNode.java
deleted file mode 100644
index 7288fe0..0000000
--- a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/modal/ModalHostShadowNode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-/*
- * Copyright (c) Meta Platforms, Inc. and affiliates.
- *
- * This source code is licensed under the MIT license found in the
- * LICENSE file in the root directory of this source tree.
- */
-
-package com.facebook.react.views.modal;
-
-import android.graphics.Point;
-import com.facebook.react.uimanager.LayoutShadowNode;
-import com.facebook.react.uimanager.ReactShadowNodeImpl;
-
-/**
- * We implement the Modal by using an Android Dialog. That will fill the entire window of the
- * application. To get layout to work properly, we need to layout all the elements within the
- * Modal's inner content view as if they can fill the entire window. To do that, we need to
- * explicitly set the styleWidth and styleHeight on the LayoutShadowNode of the child of this node
- * to be the window size. This will then cause the children of the Modal to layout as if they can
- * fill the window.
- */
-class ModalHostShadowNode extends LayoutShadowNode {
-
-  public ModalHostShadowNode() {}
-
-  /**
-   * We need to set the styleWidth and styleHeight of the one child (represented by the <View/>
-   * within the <RCTModalHostView/> in Modal.js. This needs to fill the entire window.
-   */
-  @Override
-  public void addChildAt(ReactShadowNodeImpl child, int i) {
-    super.addChildAt(child, i);
-    Point modalSize = ModalHostHelper.getModalHostSize(getThemedContext());
-    child.setStyleWidth(modalSize.x);
-    child.setStyleHeight(modalSize.y);
-  }
-}
diff --git a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/modal/ReactModalHostManager.java b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/modal/ReactModalHostManager.java
index 15ce94c..17c6782 100644
--- a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/modal/ReactModalHostManager.java
+++ b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/modal/ReactModalHostManager.java
@@ -50,16 +50,6 @@ public class ReactModalHostManager extends ViewGroupManager<ReactModalHostView>
     return new ReactModalHostView(reactContext);
   }
 
-  @Override
-  public LayoutShadowNode createShadowNodeInstance() {
-    return new ModalHostShadowNode();
-  }
-
-  @Override
-  public Class<? extends LayoutShadowNode> getShadowNodeClass() {
-    return ModalHostShadowNode.class;
-  }
-
   @Override
   public void onDropViewInstance(ReactModalHostView view) {
     super.onDropViewInstance(view);
@@ -168,8 +158,6 @@ public class ReactModalHostManager extends ViewGroupManager<ReactModalHostView>
   public Object updateState(
       ReactModalHostView view, ReactStylesDiffMap props, StateWrapper stateWrapper) {
     view.getFabricViewStateManager().setStateWrapper(stateWrapper);
-    Point modalSize = ModalHostHelper.getModalHostSize(view.getContext());
-    view.updateState(modalSize.x, modalSize.y);
     return null;
   }
 
diff --git a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/textinput/ReactTextInputManager.java b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/textinput/ReactTextInputManager.java
index 35c31e9..f003b80 100644
--- a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/textinput/ReactTextInputManager.java
+++ b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/textinput/ReactTextInputManager.java
@@ -729,7 +729,9 @@ public class ReactTextInputManager extends BaseViewManager<ReactEditText, Layout
 
   @ReactProp(name = ViewProps.MAXIMUM_NUMBER_OF_LINES, defaultInt = 1)
   public void setMaxNumLines(ReactEditText view, int numLines) {
-    view.setInputType(view.getInputType() | InputType.TYPE_TEXT_FLAG_MULTI_LINE);
+    if ((view.getInputType() & InputType.TYPE_TEXT_FLAG_MULTI_LINE) == 0) {
+      view.setInputType(view.getInputType() | InputType.TYPE_TEXT_FLAG_MULTI_LINE);
+    }
     view.setMaxLines(numLines);
   }
 
diff --git a/node_modules/react-native/ReactCommon/react/renderer/components/textinput/androidtextinput/react/renderer/components/androidtextinput/AndroidTextInputShadowNode.cpp b/node_modules/react-native/ReactCommon/react/renderer/components/textinput/androidtextinput/react/renderer/components/androidtextinput/AndroidTextInputShadowNode.cpp
index 2c9a4a5..41b21e9 100644
--- a/node_modules/react-native/ReactCommon/react/renderer/components/textinput/androidtextinput/react/renderer/components/androidtextinput/AndroidTextInputShadowNode.cpp
+++ b/node_modules/react-native/ReactCommon/react/renderer/components/textinput/androidtextinput/react/renderer/components/androidtextinput/AndroidTextInputShadowNode.cpp
@@ -169,14 +169,6 @@ void AndroidTextInputShadowNode::updateStateIfNeeded() {
 Size AndroidTextInputShadowNode::measureContent(
     LayoutContext const & /*layoutContext*/,
     LayoutConstraints const &layoutConstraints) const {
-  if (getStateData().cachedAttributedStringId != 0) {
-    return textLayoutManager_
-        ->measureCachedSpannableById(
-            getStateData().cachedAttributedStringId,
-            getConcreteProps().paragraphAttributes,
-            layoutConstraints)
-        .size;
-  }
 
   // Layout is called right after measure.
   // Measure is marked as `const`, and `layout` is not; so State can be updated
diff --git a/node_modules/react-native/ReactCommon/react/renderer/components/textinput/iostextinput/TextInputEventEmitter.cpp b/node_modules/react-native/ReactCommon/react/renderer/components/textinput/iostextinput/TextInputEventEmitter.cpp
index 494ab15..7bb266c 100644
--- a/node_modules/react-native/ReactCommon/react/renderer/components/textinput/iostextinput/TextInputEventEmitter.cpp
+++ b/node_modules/react-native/ReactCommon/react/renderer/components/textinput/iostextinput/TextInputEventEmitter.cpp
@@ -36,6 +36,23 @@ static jsi::Value textInputMetricsPayload(
   return payload;
 };
 
+static jsi::Value textInputMetricsContentSizePayload(
+    jsi::Runtime &runtime,
+    TextInputMetrics const &textInputMetrics) {
+  auto payload = jsi::Object(runtime);
+
+  {
+    auto contentSize = jsi::Object(runtime);
+    contentSize.setProperty(
+        runtime, "width", textInputMetrics.contentSize.width);
+    contentSize.setProperty(
+        runtime, "height", textInputMetrics.contentSize.height);
+    payload.setProperty(runtime, "contentSize", contentSize);
+  }
+
+  return payload;
+};
+
 static jsi::Value keyPressMetricsPayload(
     jsi::Runtime &runtime,
     KeyPressMetrics const &keyPressMetrics) {
@@ -82,7 +99,7 @@ void TextInputEventEmitter::onChangeSync(
 
 void TextInputEventEmitter::onContentSizeChange(
     TextInputMetrics const &textInputMetrics) const {
-  dispatchTextInputEvent("contentSizeChange", textInputMetrics);
+  dispatchTextInputContentSizeChangeEvent("contentSizeChange", textInputMetrics);
 }
 
 void TextInputEventEmitter::onSelectionChange(
@@ -137,4 +154,16 @@ void TextInputEventEmitter::dispatchTextInputEvent(
       priority);
 }
 
+void TextInputEventEmitter::dispatchTextInputContentSizeChangeEvent(
+    std::string const &name,
+    TextInputMetrics const &textInputMetrics,
+    EventPriority priority) const {
+  dispatchEvent(
+      name,
+      [textInputMetrics](jsi::Runtime &runtime) {
+        return textInputMetricsContentSizePayload(runtime, textInputMetrics);
+      },
+      priority);
+}
+
 } // namespace facebook::react
diff --git a/node_modules/react-native/ReactCommon/react/renderer/components/textinput/iostextinput/TextInputEventEmitter.h b/node_modules/react-native/ReactCommon/react/renderer/components/textinput/iostextinput/TextInputEventEmitter.h
index 3dc1cef..47ffbde 100644
--- a/node_modules/react-native/ReactCommon/react/renderer/components/textinput/iostextinput/TextInputEventEmitter.h
+++ b/node_modules/react-native/ReactCommon/react/renderer/components/textinput/iostextinput/TextInputEventEmitter.h
@@ -54,6 +54,11 @@ class TextInputEventEmitter : public ViewEventEmitter {
       std::string const &name,
       TextInputMetrics const &textInputMetrics,
       EventPriority priority = EventPriority::AsynchronousBatched) const;
+
+    void dispatchTextInputContentSizeChangeEvent(
+      std::string const &name,
+      TextInputMetrics const &textInputMetrics,
+      EventPriority priority = EventPriority::AsynchronousBatched) const;
 };
 
 } // namespace react
diff --git a/node_modules/react-native/ReactCommon/react/renderer/textlayoutmanager/platform/ios/RCTFontUtils.mm b/node_modules/react-native/ReactCommon/react/renderer/textlayoutmanager/platform/ios/RCTFontUtils.mm
index 4f8d5aa..57f90c5 100644
--- a/node_modules/react-native/ReactCommon/react/renderer/textlayoutmanager/platform/ios/RCTFontUtils.mm
+++ b/node_modules/react-native/ReactCommon/react/renderer/textlayoutmanager/platform/ios/RCTFontUtils.mm
@@ -35,9 +35,6 @@ static RCTFontProperties RCTResolveFontProperties(
 {
   fontProperties.family = fontProperties.family.length ? fontProperties.family : baseFontProperties.family;
   fontProperties.size = !isnan(fontProperties.size) ? fontProperties.size : baseFontProperties.size;
-  fontProperties.weight = !isnan(fontProperties.weight) ? fontProperties.weight : baseFontProperties.weight;
-  fontProperties.style =
-      fontProperties.style != RCTFontStyleUndefined ? fontProperties.style : baseFontProperties.style;
   fontProperties.variant =
       fontProperties.variant != RCTFontVariantUndefined ? fontProperties.variant : baseFontProperties.variant;
   return fontProperties;
@@ -116,9 +113,15 @@ static RCTFontStyle RCTGetFontStyle(UIFont *font)
   if ([fontProperties.family isEqualToString:defaultFontProperties.family]) {
     // Handle system font as special case. This ensures that we preserve
     // the specific metrics of the standard system font as closely as possible.
+    fontProperties.weight = !isnan(fontProperties.weight) ? fontProperties.weight : defaultFontProperties.weight;
+    fontProperties.style =
+        fontProperties.style != RCTFontStyleUndefined ? fontProperties.style : defaultFontProperties.style;
+      
     font = RCTDefaultFontWithFontProperties(fontProperties);
   } else {
     NSArray<NSString *> *fontNames = [UIFont fontNamesForFamilyName:fontProperties.family];
+    UIFontWeight fontWeight = fontProperties.weight;
+    RCTFontStyle fontStyle = fontProperties.style;
 
     if (fontNames.count == 0) {
       // Gracefully handle being given a font name rather than font family, for
@@ -129,18 +132,24 @@ static RCTFontStyle RCTGetFontStyle(UIFont *font)
         // Failback to system font.
         font = [UIFont systemFontOfSize:effectiveFontSize weight:fontProperties.weight];
       }
-    } else {
+        
+      fontNames = [UIFont fontNamesForFamilyName:font.familyName];
+      fontWeight = isnan(fontWeight) ? RCTGetFontWeight(font) : fontWeight;
+      fontStyle = fontStyle == RCTFontStyleUndefined ? RCTGetFontStyle(font) : fontStyle;
+    }
+
+    if (fontNames.count != 0) {
       // Get the closest font that matches the given weight for the fontFamily
       CGFloat closestWeight = INFINITY;
       for (NSString *name in fontNames) {
         UIFont *fontMatch = [UIFont fontWithName:name size:effectiveFontSize];
 
-        if (RCTGetFontStyle(fontMatch) != fontProperties.style) {
+        if (RCTGetFontStyle(fontMatch) != fontStyle) {
           continue;
         }
 
         CGFloat testWeight = RCTGetFontWeight(fontMatch);
-        if (ABS(testWeight - fontProperties.weight) < ABS(closestWeight - fontProperties.weight)) {
+        if (ABS(testWeight - fontWeight) < ABS(closestWeight - fontWeight)) {
           font = fontMatch;
           closestWeight = testWeight;
         }
diff --git a/node_modules/react-native/build.gradle.kts b/node_modules/react-native/build.gradle.kts
new file mode 100644
index 0000000..4e13a44
--- /dev/null
+++ b/node_modules/react-native/build.gradle.kts
@@ -0,0 +1,131 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+plugins { id("io.github.gradle-nexus.publish-plugin") version "1.1.0" }
+
+val reactAndroidProperties = java.util.Properties()
+
+File("$rootDir/ReactAndroid/gradle.properties").inputStream().use {
+  reactAndroidProperties.load(it)
+}
+
+version =
+    if (project.hasProperty("isNightly") &&
+        (project.property("isNightly") as? String).toBoolean()) {
+      "${reactAndroidProperties.getProperty("VERSION_NAME")}-SNAPSHOT"
+    } else {
+      reactAndroidProperties.getProperty("VERSION_NAME")
+    }
+
+group = "com.facebook.react"
+
+val ndkPath by extra(System.getenv("ANDROID_NDK"))
+val ndkVersion by extra(System.getenv("ANDROID_NDK_VERSION"))
+
+buildscript {
+  repositories {
+    google()
+    mavenCentral()
+    gradlePluginPortal()
+  }
+  dependencies {
+    classpath("com.android.tools.build:gradle:7.3.1")
+    classpath("de.undercouch:gradle-download-task:5.0.1")
+    classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.10")
+  }
+}
+
+val sonatypeUsername = findProperty("SONATYPE_USERNAME")?.toString()
+val sonatypePassword = findProperty("SONATYPE_PASSWORD")?.toString()
+
+nexusPublishing {
+  repositories {
+    sonatype {
+      username.set(sonatypeUsername)
+      password.set(sonatypePassword)
+    }
+  }
+}
+
+allprojects {
+  repositories {
+    maven { url = uri("$rootDir/node_modules/jsc-android/dist") }
+    maven { url = uri("$rootDir/android") }
+    google()
+    mavenCentral {
+      // We don't want to fetch react-native from Maven Central as there are
+      // older versions over there.
+      content { excludeGroup("com.facebook.react") }
+    }
+  }
+}
+
+tasks.register("cleanAll", Delete::class.java) {
+  description = "Remove all the build files and intermediate build outputs"
+  dependsOn(gradle.includedBuild("react-native-gradle-plugin").task(":clean"))
+  dependsOn(":ReactAndroid:clean")
+  dependsOn(":ReactAndroid:hermes-engine:clean")
+  dependsOn(":packages:rn-tester:android:app:clean")
+  delete(allprojects.map { it.buildDir })
+  delete(rootProject.file("./ReactAndroid/.cxx"))
+  delete(rootProject.file("./ReactAndroid/hermes-engine/.cxx"))
+  delete(rootProject.file("./sdks/download/"))
+  delete(rootProject.file("./sdks/hermes/"))
+  delete(rootProject.file("./ReactAndroid/src/main/jni/prebuilt/lib/arm64-v8a/"))
+  delete(rootProject.file("./ReactAndroid/src/main/jni/prebuilt/lib/armeabi-v7a/"))
+  delete(rootProject.file("./ReactAndroid/src/main/jni/prebuilt/lib/x86/"))
+  delete(rootProject.file("./ReactAndroid/src/main/jni/prebuilt/lib/x86_64/"))
+  delete(rootProject.file("./packages/react-native-codegen/lib"))
+  delete(rootProject.file("./packages/rn-tester/android/app/.cxx"))
+}
+
+tasks.register("buildAll") {
+  description = "Build and test all the React Native relevant projects."
+  dependsOn(gradle.includedBuild("react-native-gradle-plugin").task(":build"))
+  // This builds both the React Native framework for both debug and release
+  dependsOn(":ReactAndroid:assemble")
+  // This creates all the Maven artifacts and makes them available in the /android folder
+  dependsOn(":ReactAndroid:installArchives")
+  // This builds RN Tester for Hermes/JSC for debug only
+  dependsOn(":packages:rn-tester:android:app:assembleDebug")
+  // This compiles the Unit Test sources (without running them as they're partially broken)
+  dependsOn(":ReactAndroid:compileDebugUnitTestSources")
+  dependsOn(":ReactAndroid:compileReleaseUnitTestSources")
+}
+
+tasks.register("downloadAll") {
+  description = "Download all the depedencies needed locally so they can be cached on CI."
+  dependsOn(gradle.includedBuild("react-native-gradle-plugin").task(":dependencies"))
+  dependsOn(":ReactAndroid:downloadNdkBuildDependencies")
+  dependsOn(":ReactAndroid:dependencies")
+  dependsOn(":ReactAndroid:androidDependencies")
+  dependsOn(":ReactAndroid:hermes-engine:dependencies")
+  dependsOn(":ReactAndroid:hermes-engine:androidDependencies")
+}
+
+tasks.register("publishAllInsideNpmPackage") {
+  description =
+      "Publish all the artifacts to be available inside the NPM package in the `android` folder."
+  // Due to size constraints of NPM, we publish only react-native and hermes-engine inside
+  // the NPM package.
+  dependsOn(":ReactAndroid:installArchives")
+  dependsOn(":ReactAndroid:hermes-engine:installArchives")
+}
+
+tasks.register("publishAllToMavenTempLocal") {
+  description = "Publish all the artifacts to be available inside a Maven Local repository on /tmp."
+  dependsOn(":ReactAndroid:publishAllPublicationsToMavenTempLocalRepository")
+  // We don't publish the external-artifacts to Maven Local as CircleCI is using it via workspace.
+  dependsOn(":ReactAndroid:hermes-engine:publishAllPublicationsToMavenTempLocalRepository")
+}
+
+tasks.register("publishAllToSonatype") {
+  description = "Publish all the artifacts to Sonatype (Maven Central or Snapshot repository)"
+  dependsOn(":ReactAndroid:publishToSonatype")
+  dependsOn(":ReactAndroid:external-artifacts:publishToSonatype")
+  dependsOn(":ReactAndroid:hermes-engine:publishToSonatype")
+}
\ No newline at end of file
diff --git a/node_modules/react-native/gradle.properties b/node_modules/react-native/gradle.properties
new file mode 100644
index 0000000..a59cb26
--- /dev/null
+++ b/node_modules/react-native/gradle.properties
@@ -0,0 +1,12 @@
+# This is causing issue with dependencies task: https://github.com/gradle/gradle/issues/9645#issuecomment-530746758
+# org.gradle.configureondemand=true
+org.gradle.daemon=true
+org.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=1g -Dfile.encoding=UTF-8
+org.gradle.parallel=true
+
+android.useAndroidX=true
+
+# Use this property to specify which architecture you want to build.
+# You can also override it from the CLI using
+# ./gradlew <task> -PreactNativeArchitectures=x86_64
+reactNativeArchitectures=armeabi-v7a,arm64-v8a,x86,x86_64
\ No newline at end of file
diff --git a/node_modules/react-native/settings.gradle.kts b/node_modules/react-native/settings.gradle.kts
new file mode 100644
index 0000000..bbbff9e
--- /dev/null
+++ b/node_modules/react-native/settings.gradle.kts
@@ -0,0 +1,34 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+pluginManagement {
+  repositories {
+    mavenCentral()
+    google()
+    gradlePluginPortal()
+  }
+}
+
+include(":ReactAndroid", ":ReactAndroid:hermes-engine", ":ReactAndroid:external-artifacts")
+
+// If the ./packages folder exists, then we're inside the React Native repository.
+// If not, a users is consuming this project for a build from source.
+if (File("${rootDir}/packages").exists()) {
+  include(":packages:rn-tester:android:app")
+  // Include this to enable codegen Gradle plugin.
+  includeBuild("packages/react-native-gradle-plugin/")
+}
+
+rootProject.name = "react-native-github"
+
+plugins { id("com.gradle.enterprise").version("3.7.1") }
+
+// If you specify a file inside gradle/gradle-enterprise.gradle.kts
+// you can configure your custom Gradle Enterprise instance
+if (File("./gradle/gradle-enterprise.gradle.kts").exists()) {
+  apply(from = "./gradle/gradle-enterprise.gradle.kts")
+}
\ No newline at end of file
