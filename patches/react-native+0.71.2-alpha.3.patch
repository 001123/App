diff --git a/node_modules/react-native/ReactCommon/react/renderer/textlayoutmanager/platform/ios/RCTFontUtils.mm b/node_modules/react-native/ReactCommon/react/renderer/textlayoutmanager/platform/ios/RCTFontUtils.mm
index 4f8d5aa..57f90c5 100644
--- a/node_modules/react-native/ReactCommon/react/renderer/textlayoutmanager/platform/ios/RCTFontUtils.mm
+++ b/node_modules/react-native/ReactCommon/react/renderer/textlayoutmanager/platform/ios/RCTFontUtils.mm
@@ -35,9 +35,6 @@ static RCTFontProperties RCTResolveFontProperties(
 {
   fontProperties.family = fontProperties.family.length ? fontProperties.family : baseFontProperties.family;
   fontProperties.size = !isnan(fontProperties.size) ? fontProperties.size : baseFontProperties.size;
-  fontProperties.weight = !isnan(fontProperties.weight) ? fontProperties.weight : baseFontProperties.weight;
-  fontProperties.style =
-      fontProperties.style != RCTFontStyleUndefined ? fontProperties.style : baseFontProperties.style;
   fontProperties.variant =
       fontProperties.variant != RCTFontVariantUndefined ? fontProperties.variant : baseFontProperties.variant;
   return fontProperties;
@@ -116,9 +113,15 @@ static RCTFontStyle RCTGetFontStyle(UIFont *font)
   if ([fontProperties.family isEqualToString:defaultFontProperties.family]) {
     // Handle system font as special case. This ensures that we preserve
     // the specific metrics of the standard system font as closely as possible.
+    fontProperties.weight = !isnan(fontProperties.weight) ? fontProperties.weight : defaultFontProperties.weight;
+    fontProperties.style =
+        fontProperties.style != RCTFontStyleUndefined ? fontProperties.style : defaultFontProperties.style;
+      
     font = RCTDefaultFontWithFontProperties(fontProperties);
   } else {
     NSArray<NSString *> *fontNames = [UIFont fontNamesForFamilyName:fontProperties.family];
+    UIFontWeight fontWeight = fontProperties.weight;
+    RCTFontStyle fontStyle = fontProperties.style;
 
     if (fontNames.count == 0) {
       // Gracefully handle being given a font name rather than font family, for
@@ -129,18 +132,24 @@ static RCTFontStyle RCTGetFontStyle(UIFont *font)
         // Failback to system font.
         font = [UIFont systemFontOfSize:effectiveFontSize weight:fontProperties.weight];
       }
-    } else {
+        
+      fontNames = [UIFont fontNamesForFamilyName:font.familyName];
+      fontWeight = isnan(fontWeight) ? RCTGetFontWeight(font) : fontWeight;
+      fontStyle = fontStyle == RCTFontStyleUndefined ? RCTGetFontStyle(font) : fontStyle;
+    }
+
+    if (fontNames.count != 0) {
       // Get the closest font that matches the given weight for the fontFamily
       CGFloat closestWeight = INFINITY;
       for (NSString *name in fontNames) {
         UIFont *fontMatch = [UIFont fontWithName:name size:effectiveFontSize];
 
-        if (RCTGetFontStyle(fontMatch) != fontProperties.style) {
+        if (RCTGetFontStyle(fontMatch) != fontStyle) {
           continue;
         }
 
         CGFloat testWeight = RCTGetFontWeight(fontMatch);
-        if (ABS(testWeight - fontProperties.weight) < ABS(closestWeight - fontProperties.weight)) {
+        if (ABS(testWeight - fontWeight) < ABS(closestWeight - fontWeight)) {
           font = fontMatch;
           closestWeight = testWeight;
         }
diff --git a/node_modules/react-native/build.gradle.kts b/node_modules/react-native/build.gradle.kts
new file mode 100644
index 0000000..4e13a44
--- /dev/null
+++ b/node_modules/react-native/build.gradle.kts
@@ -0,0 +1,131 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+plugins { id("io.github.gradle-nexus.publish-plugin") version "1.1.0" }
+
+val reactAndroidProperties = java.util.Properties()
+
+File("$rootDir/ReactAndroid/gradle.properties").inputStream().use {
+  reactAndroidProperties.load(it)
+}
+
+version =
+    if (project.hasProperty("isNightly") &&
+        (project.property("isNightly") as? String).toBoolean()) {
+      "${reactAndroidProperties.getProperty("VERSION_NAME")}-SNAPSHOT"
+    } else {
+      reactAndroidProperties.getProperty("VERSION_NAME")
+    }
+
+group = "com.facebook.react"
+
+val ndkPath by extra(System.getenv("ANDROID_NDK"))
+val ndkVersion by extra(System.getenv("ANDROID_NDK_VERSION"))
+
+buildscript {
+  repositories {
+    google()
+    mavenCentral()
+    gradlePluginPortal()
+  }
+  dependencies {
+    classpath("com.android.tools.build:gradle:7.3.1")
+    classpath("de.undercouch:gradle-download-task:5.0.1")
+    classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.10")
+  }
+}
+
+val sonatypeUsername = findProperty("SONATYPE_USERNAME")?.toString()
+val sonatypePassword = findProperty("SONATYPE_PASSWORD")?.toString()
+
+nexusPublishing {
+  repositories {
+    sonatype {
+      username.set(sonatypeUsername)
+      password.set(sonatypePassword)
+    }
+  }
+}
+
+allprojects {
+  repositories {
+    maven { url = uri("$rootDir/node_modules/jsc-android/dist") }
+    maven { url = uri("$rootDir/android") }
+    google()
+    mavenCentral {
+      // We don't want to fetch react-native from Maven Central as there are
+      // older versions over there.
+      content { excludeGroup("com.facebook.react") }
+    }
+  }
+}
+
+tasks.register("cleanAll", Delete::class.java) {
+  description = "Remove all the build files and intermediate build outputs"
+  dependsOn(gradle.includedBuild("react-native-gradle-plugin").task(":clean"))
+  dependsOn(":ReactAndroid:clean")
+  dependsOn(":ReactAndroid:hermes-engine:clean")
+  dependsOn(":packages:rn-tester:android:app:clean")
+  delete(allprojects.map { it.buildDir })
+  delete(rootProject.file("./ReactAndroid/.cxx"))
+  delete(rootProject.file("./ReactAndroid/hermes-engine/.cxx"))
+  delete(rootProject.file("./sdks/download/"))
+  delete(rootProject.file("./sdks/hermes/"))
+  delete(rootProject.file("./ReactAndroid/src/main/jni/prebuilt/lib/arm64-v8a/"))
+  delete(rootProject.file("./ReactAndroid/src/main/jni/prebuilt/lib/armeabi-v7a/"))
+  delete(rootProject.file("./ReactAndroid/src/main/jni/prebuilt/lib/x86/"))
+  delete(rootProject.file("./ReactAndroid/src/main/jni/prebuilt/lib/x86_64/"))
+  delete(rootProject.file("./packages/react-native-codegen/lib"))
+  delete(rootProject.file("./packages/rn-tester/android/app/.cxx"))
+}
+
+tasks.register("buildAll") {
+  description = "Build and test all the React Native relevant projects."
+  dependsOn(gradle.includedBuild("react-native-gradle-plugin").task(":build"))
+  // This builds both the React Native framework for both debug and release
+  dependsOn(":ReactAndroid:assemble")
+  // This creates all the Maven artifacts and makes them available in the /android folder
+  dependsOn(":ReactAndroid:installArchives")
+  // This builds RN Tester for Hermes/JSC for debug only
+  dependsOn(":packages:rn-tester:android:app:assembleDebug")
+  // This compiles the Unit Test sources (without running them as they're partially broken)
+  dependsOn(":ReactAndroid:compileDebugUnitTestSources")
+  dependsOn(":ReactAndroid:compileReleaseUnitTestSources")
+}
+
+tasks.register("downloadAll") {
+  description = "Download all the depedencies needed locally so they can be cached on CI."
+  dependsOn(gradle.includedBuild("react-native-gradle-plugin").task(":dependencies"))
+  dependsOn(":ReactAndroid:downloadNdkBuildDependencies")
+  dependsOn(":ReactAndroid:dependencies")
+  dependsOn(":ReactAndroid:androidDependencies")
+  dependsOn(":ReactAndroid:hermes-engine:dependencies")
+  dependsOn(":ReactAndroid:hermes-engine:androidDependencies")
+}
+
+tasks.register("publishAllInsideNpmPackage") {
+  description =
+      "Publish all the artifacts to be available inside the NPM package in the `android` folder."
+  // Due to size constraints of NPM, we publish only react-native and hermes-engine inside
+  // the NPM package.
+  dependsOn(":ReactAndroid:installArchives")
+  dependsOn(":ReactAndroid:hermes-engine:installArchives")
+}
+
+tasks.register("publishAllToMavenTempLocal") {
+  description = "Publish all the artifacts to be available inside a Maven Local repository on /tmp."
+  dependsOn(":ReactAndroid:publishAllPublicationsToMavenTempLocalRepository")
+  // We don't publish the external-artifacts to Maven Local as CircleCI is using it via workspace.
+  dependsOn(":ReactAndroid:hermes-engine:publishAllPublicationsToMavenTempLocalRepository")
+}
+
+tasks.register("publishAllToSonatype") {
+  description = "Publish all the artifacts to Sonatype (Maven Central or Snapshot repository)"
+  dependsOn(":ReactAndroid:publishToSonatype")
+  dependsOn(":ReactAndroid:external-artifacts:publishToSonatype")
+  dependsOn(":ReactAndroid:hermes-engine:publishToSonatype")
+}
\ No newline at end of file
diff --git a/node_modules/react-native/gradle.properties b/node_modules/react-native/gradle.properties
new file mode 100644
index 0000000..a59cb26
--- /dev/null
+++ b/node_modules/react-native/gradle.properties
@@ -0,0 +1,12 @@
+# This is causing issue with dependencies task: https://github.com/gradle/gradle/issues/9645#issuecomment-530746758
+# org.gradle.configureondemand=true
+org.gradle.daemon=true
+org.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=1g -Dfile.encoding=UTF-8
+org.gradle.parallel=true
+
+android.useAndroidX=true
+
+# Use this property to specify which architecture you want to build.
+# You can also override it from the CLI using
+# ./gradlew <task> -PreactNativeArchitectures=x86_64
+reactNativeArchitectures=armeabi-v7a,arm64-v8a,x86,x86_64
\ No newline at end of file
diff --git a/node_modules/react-native/settings.gradle.kts b/node_modules/react-native/settings.gradle.kts
new file mode 100644
index 0000000..bbbff9e
--- /dev/null
+++ b/node_modules/react-native/settings.gradle.kts
@@ -0,0 +1,34 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+pluginManagement {
+  repositories {
+    mavenCentral()
+    google()
+    gradlePluginPortal()
+  }
+}
+
+include(":ReactAndroid", ":ReactAndroid:hermes-engine", ":ReactAndroid:external-artifacts")
+
+// If the ./packages folder exists, then we're inside the React Native repository.
+// If not, a users is consuming this project for a build from source.
+if (File("${rootDir}/packages").exists()) {
+  include(":packages:rn-tester:android:app")
+  // Include this to enable codegen Gradle plugin.
+  includeBuild("packages/react-native-gradle-plugin/")
+}
+
+rootProject.name = "react-native-github"
+
+plugins { id("com.gradle.enterprise").version("3.7.1") }
+
+// If you specify a file inside gradle/gradle-enterprise.gradle.kts
+// you can configure your custom Gradle Enterprise instance
+if (File("./gradle/gradle-enterprise.gradle.kts").exists()) {
+  apply(from = "./gradle/gradle-enterprise.gradle.kts")
+}
\ No newline at end of file
